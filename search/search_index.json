{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Shopping Cart API Documentation","text":""},{"location":"#1-introduction","title":"1. Introduction","text":""},{"location":"#overview","title":"Overview","text":"<p>The Shopping Cart API is a RESTful service that allows client applications to interact with a virtual shopping cart system. It enables users to add, update, remove items, and view cart contents before placing an order. This API is essential in e-commerce environments to manage the customer's selections and buying process.</p>"},{"location":"#why-it-matters","title":"Why It Matters","text":"<p>A shopping cart is the central component in online retail platforms. Without a reliable, secure, and flexible Shopping Cart API, customers can't effectively manage their purchases, leading to poor user experience and lost sales.</p>"},{"location":"#who-this-guide-is-for","title":"Who This Guide is For","text":"<p>This documentation is written for: - Frontend and backend developers working on e-commerce applications - QA engineers testing cart-related features - DevOps teams deploying API services - Technical leads integrating cart functionality with order and payment systems</p>"},{"location":"#2-key-terminology","title":"2. Key Terminology","text":"<ul> <li>Cart: A temporary container storing items a user intends to purchase.</li> <li>Cart ID: A unique identifier for a specific cart (often user-bound or session-based).</li> <li>Item ID: Unique identifier of a product added to the cart.</li> <li>Quantity: Number of units of a product in the cart.</li> <li>Subtotal: Sum of all item prices in the cart, excluding taxes or discounts.</li> <li>Session Token: Auth token representing the user session.</li> <li>Checkout: The process of finalizing a cart and converting it into an order.</li> </ul>"},{"location":"#3-technical-overview","title":"3. Technical Overview","text":""},{"location":"#31-system-architecture","title":"3.1 System Architecture","text":"<p>The Shopping Cart API typically sits between the frontend interface and the backend order/payment system. It uses a session or user-based identifier to store cart contents, either in memory (Redis), database, or cache store.</p> <pre><code>graph TD\n    A[Client (Web/App)] --&gt;|API Request| B[Shopping Cart API]\n    B --&gt; C[In-Memory Store (Redis)]\n    B --&gt; D[Product Catalog API]\n    B --&gt; E[Order Management API]\n    B --&gt; F[Authentication Service]\n</code></pre>"},{"location":"#32-core-technologies","title":"3.2 Core Technologies","text":"<ul> <li> <p>Language/Framework: Node.js (Express), Python (Django REST), Java (Spring Boot)</p> </li> <li> <p>Storage: Redis (for fast session-based cart), or SQL/NoSQL DB</p> </li> <li> <p>Authentication: JWT, OAuth 2.0</p> </li> <li> <p>Formats: JSON for request/response</p> </li> </ul>"},{"location":"#4-step-by-step-guide-or-workflow","title":"4. Step-by-Step Guide or Workflow","text":""},{"location":"#41-authentication","title":"4.1 Authentication","text":"<p>Ensure each request includes a valid token or session header: <pre><code>pgsql\n\nAuthorization: Bearer &lt;your-access-token&gt;\n</code></pre></p>"},{"location":"#42-api-endpoints","title":"4.2 API Endpoints","text":""},{"location":"#421-createget-user-cart","title":"4.2.1. Create/Get User Cart","text":"<p>GET /api/cart</p> <p>Response: <pre><code>json\n\n{\n  \"cart_id\": \"abc123\",\n  \"items\": [],\n  \"subtotal\": 0.00\n}\n</code></pre></p>"},{"location":"#422-add-item-to-cart","title":"4.2.2. Add Item to Cart","text":"<p>POST /api/cart/items</p> <p>Request Body:</p> <p><pre><code>json\n{\n  \"product_id\": \"p001\",\n  \"quantity\": 2\n}\n</code></pre> Response: <pre><code>json\n{\n  \"message\": \"Item added to cart.\",\n  \"cart\": {\n    \"items\": [\n      {\n        \"product_id\": \"p001\",\n        \"quantity\": 2,\n        \"price\": 15.00\n      }\n    ],\n    \"subtotal\": 30.00\n  }\n}\n</code></pre></p>"},{"location":"#423-update-item-quantity","title":"4.2.3. Update Item Quantity","text":"<p>PUT /api/cart/items/p001</p> <p>Request Body: <pre><code>json\n{\n  \"quantity\": 3\n}\n</code></pre></p>"},{"location":"#424-remove-item-from-cart","title":"4.2.4. Remove Item from Cart","text":"<p>DELETE /api/cart/items/p001</p> <p>Response: <pre><code>json\n{\n  \"message\": \"Item removed\",\n  \"cart\": {\n    \"items\": [],\n    \"subtotal\": 0.00\n  }\n}\n</code></pre></p>"},{"location":"#425-empty-the-cart","title":"4.2.5. Empty the Cart","text":"<p>DELETE /api/cart</p>"},{"location":"#426-proceed-to-checkout","title":"4.2.6. Proceed to Checkout","text":"<p>POST /api/cart/checkout</p> <p>Response: <pre><code>json\n{\n  \"order_id\": \"ORD56789\",\n  \"status\": \"checkout_started\"\n}\n</code></pre></p>"},{"location":"#5-best-practices","title":"5. Best Practices","text":"<ul> <li> <p>Expire Inactive Carts: Set TTL in Redis to auto-delete old carts.</p> </li> <li> <p>Validate Stock Availability: Sync with Product Catalog API before checkout.</p> </li> <li> <p>Avoid Overwrites: Use PATCH for partial updates.</p> </li> <li> <p>Use Rate Limiting: Protect cart endpoints from abuse.</p> </li> <li> <p>Encrypt Sensitive Data: e.g., pricing or promo codes.</p> </li> <li> <p>Decouple Checkout: Handle payment/order creation in a separate service.</p> </li> </ul>"},{"location":"#6-common-issues-troubleshooting","title":"6. Common Issues &amp; Troubleshooting","text":"Issue Description Resolution 404 Not Found Cart or item doesn't exist  Ensure the cart/session is valid 409 Conflict Item already exists   Use PUT to update quantity instead of POST 401 Unauthorized Invalid or expired token  Re-authenticate the user 422 Unprocessable Invalid product ID or quantity  Validate against Product API"},{"location":"#7-references","title":"7. References","text":"<p>Redis for Session Storage</p> <p>REST API Best Practices</p> <p>JWT Authentication Guide</p> <p>Stripe API Checkout Flow</p>"},{"location":"#8-appendix","title":"8. Appendix","text":"<p>Sample Cart Object</p> <p><pre><code>json\n{\n  \"cart_id\": \"abc123\",\n  \"user_id\": \"u5678\",\n  \"items\": [\n    {\n      \"product_id\": \"p001\",\n      \"name\": \"USB-C Charger\",\n      \"quantity\": 2,\n      \"unit_price\": 25.00\n    }\n  ],\n  \"subtotal\": 50.00,\n  \"created_at\": \"2025-06-27T15:30:00Z\"\n}\n</code></pre> Mermaid Sequence: Add Item to Cart</p> <pre><code>sequenceDiagram\n    Client -&gt;&gt; Cart API: POST /cart/items\n    Cart API -&gt;&gt; Product API: GET /products/{id}\n    Product API --&gt;&gt; Cart API: Product info\n    Cart API -&gt;&gt; Storage: Add item to cart\n    Cart API --&gt;&gt; Client: Cart updated\n</code></pre> <p>Shell Example: Add to Cart bash <pre><code>curl -X POST https://api.example.com/api/cart/items \\\n  -H \"Authorization: Bearer &lt;your-token&gt;\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"product_id\": \"p001\", \"quantity\": 2}'\n</code></pre></p>"}]}